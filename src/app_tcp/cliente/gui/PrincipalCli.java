package app_tcp.cliente.gui;

import javax.swing.*;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.File;
import java.io.FileInputStream;
import java.net.Socket;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * author: Vinni 2024
 * changes: JSebastianB 2024
 */
public class PrincipalCli extends javax.swing.JFrame {

    private final int PORT = 12345;
    private final String HOST = "localhost";
    private Socket socket;
    private PrintWriter out;
    private BufferedReader in;
    private DataOutputStream dos;

    /**
     * Creates new form Principal1
     */
    public PrincipalCli() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        this.setTitle("Cliente ");
        bConectar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mensajesTxt = new javax.swing.JTextArea();
        mensajeTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btEnviar = new javax.swing.JButton();
        cPorts = new javax.swing.JComboBox<String>();
        jLabel3 = new javax.swing.JLabel();
        
        jLabel4 = new javax.swing.JLabel();
        destinatarioTxt = new javax.swing.JTextField();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        bConectar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bConectar.setText("CONECTAR CON SERVIDOR");
        bConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConectarActionPerformed(evt);
            }
        });
        getContentPane().add(bConectar);
        bConectar.setBounds(260, 40, 210, 40);
        
        
        jLabel3.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel3.setText("IP servidor:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(20, 41, 90, 30);
        
        
        cPorts.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cPorts.addItem("12345");
        cPorts.addItem("12346");
        cPorts.addItem("12347");
        getContentPane().add(cPorts);
        cPorts.setBounds(110, 40, 120, 40);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("CLIENTE TCP : XXXXX");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(110, 10, 250, 17);

        mensajesTxt.setColumns(20);
        mensajesTxt.setRows(5);
        mensajesTxt.setEnabled(false);
        jScrollPane1.setViewportView(mensajesTxt);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(30, 210, 410, 110);

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel4.setText("Destinatario:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(20, 90, 120, 30);
        
        destinatarioTxt.setFont(new java.awt.Font("Verdana", 0, 14));
        destinatarioTxt.setEnabled(false);
        getContentPane().add(destinatarioTxt);
        destinatarioTxt.setBounds(120, 90, 270, 30);

        
        jLabel2.setFont(new java.awt.Font("Verdana", 0, 14)); 
        jLabel2.setText("Mensaje:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 120, 120, 30);
        
        mensajeTxt.setFont(new java.awt.Font("Verdana", 0, 14)); 
        mensajeTxt.setEnabled(false);
        getContentPane().add(mensajeTxt);
        mensajeTxt.setBounds(40, 150, 350, 30);

        btEnviar.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        btEnviar.setText("Enviar");
        btEnviar.setEnabled(false);
        btEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnviarActionPerformed(evt);
            }
        });
        getContentPane().add(btEnviar);
        btEnviar.setBounds(327, 180, 120, 27);

        setSize(new java.awt.Dimension(491, 375));
        setLocationRelativeTo(null);
    }// </editor-fold>

    private void bConectarActionPerformed(java.awt.event.ActionEvent evt) {
        conectar();
    }
    private void btEnviarActionPerformed(java.awt.event.ActionEvent evt) {
        this.enviarMensaje();

    }



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrincipalCli().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton bConectar;
    private javax.swing.JButton btEnviar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea mensajesTxt;
    private JTextField mensajeTxt;
    private JTextField destinatarioTxt;
    private javax.swing.JComboBox<String> cPorts;
    // End of variables declaration

    private void conectar() {
        int puerto = Integer.valueOf(cPorts.getSelectedItem().toString());
        try {
            if (socket == null || socket.isClosed()) 
            {
                socket = new Socket(HOST, puerto); // Asume que el servidor está en localhost y escucha en el puerto 5555
                out = new PrintWriter(socket.getOutputStream(), true);
                dos = new DataOutputStream(socket.getOutputStream());
                mensajesTxt.append("Conectado al servidor: " + socket.getInetAddress() + ":"+ socket.getPort() +"\n");
                jLabel1.setText("CLIENTE TCP : " + socket.getLocalPort());
            }
            bConectar.setEnabled(false);
            cPorts.setEnabled(false);
            //mensajeTxt.setEnabled(true);
            destinatarioTxt.setEnabled(true);
            btEnviar.setEnabled(true);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            new Thread(new Runnable() {
                public void run() {
                    try {
                        String fromServer;
                        while ((fromServer = in.readLine()) != null) {
                            mensajesTxt.append("Servidor: " + fromServer + "\n");
                        }
                    } 
                    catch (IOException ex) 
                    {
                        mensajesTxt.append("Error en la comunicación con el servidor: " + ex.getMessage() + "\n");
                        mensajeTxt.setEnabled(false);
                        destinatarioTxt.setEnabled(false);
                        cPorts.setEnabled(true);
                        bConectar.setEnabled(true);
                        btEnviar.setEnabled(false);
                        
                    }
                    finally{
                        try
                        {
                            socket.close();
                        }
                        catch(IOException ex)
                        {
                            mensajesTxt.append("Error cerrando el socket del cliente: " + ex.getMessage() + "\n");
                            ex.printStackTrace();
                        } 
                    }
                }
            }).start();
            System.out.println(out);
        }catch (IOException ex){
            mensajesTxt.append("No se puede conectar al servidor: " + HOST + ":"+ puerto + ". " + ex.getMessage() + "\n");
            cPorts.setEnabled(true);
            bConectar.setEnabled(true);
            mensajeTxt.setEnabled(false);
            destinatarioTxt.setEnabled(false);
            btEnviar.setEnabled(false);
            ex.printStackTrace();
        }
    }
    private void enviarMensaje() {
        File file = SeleccionarArchivo();
        out.println(destinatarioTxt.getText() + ":" + file.getName());
        //enviarArchivo(file);
        //mensajeTxt.setText("");
    }
    
    
    private File SeleccionarArchivo() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        FileNameExtensionFilter imgFilter = new FileNameExtensionFilter("Archivos de texto", "txt", "log", "csv", "cus", "dodo"); 
        fileChooser.setFileFilter(imgFilter);

        int result = fileChooser.showOpenDialog(this);

        if (result != JFileChooser.CANCEL_OPTION) {

            File archivo = fileChooser.getSelectedFile();

            if ((archivo == null) || (archivo.getName().equals(""))) {
                mensajeTxt.setText("...");
                return null;
            } else {
                mensajeTxt.setText(archivo.getAbsolutePath());
                return archivo;
            }
        }
        return null;
    }
    
    private void enviarArchivo(File archivo) {
        try
        {
            FileInputStream fis = new FileInputStream(archivo.getAbsolutePath());
            long fileSize = archivo.length();
            // Enviar el tamaño del archivo primero
            dos.writeLong(fileSize);
            
            // Enviar el archivo en bloques
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) 
            {
                dos.write(buffer, 0, bytesRead);
            }

            System.out.println("Archivo enviado.");
        }
        catch(IOException e){
            System.out.println("Error enviando archivo " + e.getMessage());
            e.printStackTrace();
        }
        
    }
}
